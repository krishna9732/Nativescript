{"version":3,"file":"detached-loader.js","sources":["detached-loader.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAKO;AACP;AACA;AACA;;;;;;;;;;;gKAAuB;AACvB;AACA;AACA;AACA","sourcesContent":["Object.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar trace_1 = require(\"@nativescript/core/trace\");\nexports.CATEGORY = \"detached-loader\";\nfunction log(message) {\n    trace_1.write(message, exports.CATEGORY);\n}\n/**\n * Wrapper component used for loading components when navigating\n * It uses DetachedContainer as selector so that it is containerRef is not attached to\n * the visual tree.\n */\nvar DetachedLoader = /** @class */ (function () {\n    function DetachedLoader(resolver, changeDetector, containerRef) {\n        this.resolver = resolver;\n        this.changeDetector = changeDetector;\n        this.containerRef = containerRef;\n    }\n    DetachedLoader.prototype.loadInLocation = function (componentType) {\n        var factory = this.resolver.resolveComponentFactory(componentType);\n        var componentRef = this.containerRef.createComponent(factory, this.containerRef.length, this.containerRef.injector);\n        // Component is created, built may not be checked if we are loading\n        // inside component with OnPush CD strategy. Mark us for check to be sure CD will reach us.\n        // We are inside a promise here so no need for setTimeout - CD should trigger\n        // after the promise.\n        log(\"DetachedLoader.loadInLocation component loaded -> markForCheck\");\n        return Promise.resolve(componentRef);\n    };\n    DetachedLoader.prototype.detectChanges = function () {\n        this.changeDetector.markForCheck();\n    };\n    // TODO: change this API -- async promises not needed here anymore.\n    DetachedLoader.prototype.loadComponent = function (componentType) {\n        log(\"DetachedLoader.loadComponent\");\n        return this.loadInLocation(componentType);\n    };\n    DetachedLoader.prototype.loadWithFactory = function (factory) {\n        return this.containerRef.createComponent(factory, this.containerRef.length, this.containerRef.injector, null);\n    };\n    DetachedLoader = __decorate([\n        core_1.Component({\n            selector: \"DetachedContainer\",\n            template: \"<Placeholder #loader></Placeholder>\"\n        }),\n        __metadata(\"design:paramtypes\", [core_1.ComponentFactoryResolver,\n            core_1.ChangeDetectorRef,\n            core_1.ViewContainerRef])\n    ], DetachedLoader);\n    return DetachedLoader;\n}());\nexports.DetachedLoader = DetachedLoader;\n"]}