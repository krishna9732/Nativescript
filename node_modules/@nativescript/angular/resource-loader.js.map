{"version":3,"file":"resource-loader.js","sources":["resource-loader.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAEO;AACP;;;;;uFAAiC;AACjC;AACA;AACA;AACA","sourcesContent":["Object.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar compiler_1 = require(\"@angular/compiler\");\nvar file_system_1 = require(\"@nativescript/core/file-system\");\nvar ns_file_system_1 = require(\"./file-system/ns-file-system\");\nvar sourceExtensionsMap = {\n    \".scss\": \".css\",\n    \".sass\": \".css\",\n    \".less\": \".css\"\n};\nvar FileSystemResourceLoader = /** @class */ (function (_super) {\n    __extends(FileSystemResourceLoader, _super);\n    function FileSystemResourceLoader(fs) {\n        var _this = _super.call(this) || this;\n        _this.fs = fs;\n        return _this;\n    }\n    FileSystemResourceLoader.prototype.get = function (url) {\n        var resolvedPath = this.resolve(url);\n        var templateFile = this.fs.fileFromPath(resolvedPath);\n        return templateFile.readTextSync();\n    };\n    FileSystemResourceLoader.prototype.resolve = function (url) {\n        var normalizedSourceUrl = this.resolveRelativeUrls(url);\n        var normalizedCompiledFileUrl = normalizedSourceUrl.replace(/\\.\\w+$/, function (ext) { return sourceExtensionsMap[ext] || ext; });\n        if (normalizedCompiledFileUrl !== normalizedSourceUrl && this.fs.fileExists(normalizedCompiledFileUrl)) {\n            return normalizedCompiledFileUrl;\n        }\n        if (this.fs.fileExists(normalizedSourceUrl)) {\n            return normalizedSourceUrl;\n        }\n        if (normalizedCompiledFileUrl === normalizedSourceUrl) {\n            throw new Error(\"Could not resolve \" + url + \". Looked for: \" + normalizedSourceUrl + \".\");\n        }\n        else {\n            throw new Error(\"Could not resolve \" + url + \".\" +\n                (\"Looked for: \" + normalizedCompiledFileUrl + \", \" + normalizedSourceUrl + \".\"));\n        }\n    };\n    FileSystemResourceLoader.prototype.resolveRelativeUrls = function (url) {\n        // Angular assembles absolute URLs and prefixes them with //\n        if (url.indexOf(\"/\") !== 0) {\n            // Resolve relative URLs based on the app root.\n            return file_system_1.path.join(this.fs.currentApp().path, url);\n        }\n        else {\n            return url;\n        }\n    };\n    FileSystemResourceLoader = __decorate([\n        core_1.Injectable(),\n        __metadata(\"design:paramtypes\", [ns_file_system_1.NSFileSystem])\n    ], FileSystemResourceLoader);\n    return FileSystemResourceLoader;\n}(compiler_1.ResourceLoader));\nexports.FileSystemResourceLoader = FileSystemResourceLoader;\n"]}