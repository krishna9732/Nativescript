{"version":3,"file":"platform-providers.js","sources":["platform-providers.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;gDAGqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAEO;AACP;;;;;qEAAoB;AACpB;AACA;AACA;AACA","sourcesContent":["Object.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar frame_1 = require(\"@nativescript/core/ui/frame\");\nvar page_1 = require(\"@nativescript/core/ui/page\");\nvar platform_1 = require(\"@nativescript/core/platform\");\nvar rxjs_1 = require(\"rxjs\");\nvar operators_1 = require(\"rxjs/operators\");\nexports.APP_ROOT_VIEW = new core_1.InjectionToken(\"App Root View\");\nexports.DEVICE = new core_1.InjectionToken(\"platform device\");\nexports.PAGE_FACTORY = new core_1.InjectionToken(\"page factory\");\nvar _rootPageRef;\nfunction setRootPage(page) {\n    _rootPageRef = new WeakRef(page);\n}\nexports.setRootPage = setRootPage;\nfunction getRootPage() {\n    return _rootPageRef && _rootPageRef.get();\n}\nexports.getRootPage = getRootPage;\n// Use an exported function to make the AoT compiler happy.\nfunction getDefaultPage() {\n    var rootPage = getRootPage();\n    if (rootPage instanceof page_1.Page) {\n        return rootPage;\n    }\n    var frame = frame_1.Frame.topmost();\n    if (frame && frame.currentPage) {\n        return frame.currentPage;\n    }\n    return null;\n}\nexports.getDefaultPage = getDefaultPage;\nexports.defaultPageProvider = { provide: page_1.Page, useFactory: getDefaultPage };\n// Use an exported function to make the AoT compiler happy.\nfunction getDefaultFrame() {\n    return frame_1.Frame.topmost();\n}\nexports.getDefaultFrame = getDefaultFrame;\nexports.defaultFrameProvider = { provide: frame_1.Frame, useFactory: getDefaultFrame };\n// Use an exported function to make the AoT compiler happy.\nfunction getDefaultDevice() {\n    return platform_1.device;\n}\nexports.getDefaultDevice = getDefaultDevice;\nexports.defaultDeviceProvider = { provide: exports.DEVICE, useFactory: getDefaultDevice };\nexports.defaultPageFactory = function (_opts) {\n    return new page_1.Page();\n};\nexports.defaultPageFactoryProvider = { provide: exports.PAGE_FACTORY, useValue: exports.defaultPageFactory };\nvar FrameService = /** @class */ (function () {\n    function FrameService() {\n    }\n    // TODO: Add any methods that are needed to handle frame/page navigation\n    FrameService.prototype.getFrame = function () {\n        var topmostFrame = frame_1.Frame.topmost();\n        return topmostFrame;\n    };\n    FrameService = __decorate([\n        core_1.Injectable()\n    ], FrameService);\n    return FrameService;\n}());\nexports.FrameService = FrameService;\nvar PageService = /** @class */ (function () {\n    function PageService(page) {\n        this.page = page;\n        this._inPage$ = new rxjs_1.BehaviorSubject(false);\n        this._pageEvents$ = new rxjs_1.Subject();\n        if (this.page) {\n            this.page.on(\"navigatedFrom\", this.pageEvent, this);\n            this.page.on(\"navigatedTo\", this.pageEvent, this);\n            this.page.on(\"navigatingFrom\", this.pageEvent, this);\n            this.page.on(\"navigatingTo\", this.pageEvent, this);\n        }\n    }\n    Object.defineProperty(PageService.prototype, \"inPage\", {\n        get: function () { return this._inPage$.value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageService.prototype, \"inPage$\", {\n        get: function () { return this._inPage$.pipe(operators_1.distinctUntilChanged()); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageService.prototype, \"pageEvents$\", {\n        get: function () { return this._pageEvents$.asObservable(); },\n        enumerable: true,\n        configurable: true\n    });\n    PageService.prototype.ngOnDestroy = function () {\n        if (this.page) {\n            this.page.off(\"navigatedFrom\", this.pageEvent, this);\n            this.page.off(\"navigatedTo\", this.pageEvent, this);\n            this.page.off(\"navigatingFrom\", this.pageEvent, this);\n            this.page.off(\"navigatingTo\", this.pageEvent, this);\n        }\n        this._inPage$.complete();\n        this._pageEvents$.complete();\n    };\n    PageService.prototype.pageEvent = function (evt) {\n        this._pageEvents$.next(evt);\n        switch (evt.eventName) {\n            case \"navigatedTo\":\n                this._inPage$.next(true);\n                break;\n            case \"navigatedFrom\":\n                this._inPage$.next(false);\n                break;\n            default:\n        }\n    };\n    PageService = __decorate([\n        core_1.Injectable(),\n        __metadata(\"design:paramtypes\", [page_1.Page])\n    ], PageService);\n    return PageService;\n}());\nexports.PageService = PageService;\n"]}