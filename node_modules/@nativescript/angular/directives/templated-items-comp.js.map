{"version":3,"file":"templated-items-comp.js","sources":["templated-items-comp.js"],"names":[],"mappingswE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAEO;AACP;AACA;AACA;;;;;;;;;;;;;oBAA6B;AAC7B;AACA;AACA;AACA","sourcesContent":["Object.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar layout_base_1 = require(\"@nativescript/core/ui/layouts/layout-base\");\nvar observable_array_1 = require(\"@nativescript/core/data/observable-array\");\nvar profiling_1 = require(\"@nativescript/core/profiling\");\nvar element_registry_1 = require(\"../element-registry\");\nvar trace_1 = require(\"../trace\");\nvar NG_VIEW = \"_ngViewRef\";\nvar ItemContext = /** @class */ (function () {\n    function ItemContext($implicit, item, index, even, odd) {\n        this.$implicit = $implicit;\n        this.item = item;\n        this.index = index;\n        this.even = even;\n        this.odd = odd;\n    }\n    return ItemContext;\n}());\nexports.ItemContext = ItemContext;\nvar TemplatedItemsComponent = /** @class */ (function () {\n    function TemplatedItemsComponent(_elementRef, _iterableDiffers) {\n        this._iterableDiffers = _iterableDiffers;\n        this.setupItemView = new core_1.EventEmitter();\n        this.templatedItemsView = _elementRef.nativeElement;\n        this.templatedItemsView.on(\"itemLoading\", this.onItemLoading, this);\n    }\n    Object.defineProperty(TemplatedItemsComponent.prototype, \"items\", {\n        get: function () {\n            return this._items;\n        },\n        set: function (value) {\n            this._items = value;\n            var needDiffer = true;\n            if (value instanceof observable_array_1.ObservableArray) {\n                needDiffer = false;\n            }\n            if (needDiffer && !this._differ && core_1.ÉµisListLikeIterable(value)) {\n                this._differ = this._iterableDiffers.find(this._items)\n                    .create(function (_index, item) { return item; });\n            }\n            this.templatedItemsView.items = this._items;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TemplatedItemsComponent.prototype.ngAfterContentInit = function () {\n        if (trace_1.isLogEnabled()) {\n            trace_1.listViewLog(\"TemplatedItemsView.ngAfterContentInit()\");\n        }\n        this.setItemTemplates();\n    };\n    TemplatedItemsComponent.prototype.ngOnDestroy = function () {\n        this.templatedItemsView.off(\"itemLoading\", this.onItemLoading, this);\n        this.templatedItemsView = null;\n        if (this._templateMap) {\n            this._templateMap.clear();\n        }\n    };\n    TemplatedItemsComponent.prototype.setItemTemplates = function () {\n        // The itemTemplateQuery may be changed after list items are added that contain <template> inside,\n        // so cache and use only the original template to avoid errors.\n        this.itemTemplate = this.itemTemplateQuery;\n        if (this._templateMap) {\n            if (trace_1.isLogEnabled()) {\n                trace_1.listViewLog(\"Setting templates\");\n            }\n            var templates_1 = [];\n            this._templateMap.forEach(function (value) {\n                templates_1.push(value);\n            });\n            this.templatedItemsView.itemTemplates = templates_1;\n        }\n    };\n    TemplatedItemsComponent.prototype.registerTemplate = function (key, template) {\n        if (trace_1.isLogEnabled()) {\n            trace_1.listViewLog(\"registerTemplate for key: \" + key);\n        }\n        if (!this._templateMap) {\n            this._templateMap = new Map();\n        }\n        var keyedTemplate = {\n            key: key,\n            createView: this.getItemTemplateViewFactory(template)\n        };\n        this._templateMap.set(key, keyedTemplate);\n    };\n    TemplatedItemsComponent.prototype.onItemLoading = function (args) {\n        if (!args.view && !this.itemTemplate) {\n            return;\n        }\n        var index = args.index;\n        var items = args.object.items;\n        var currentItem = typeof items.getItem === \"function\" ? items.getItem(index) : items[index];\n        var viewRef;\n        if (args.view) {\n            if (trace_1.isLogEnabled()) {\n                trace_1.listViewLog(\"onItemLoading: \" + index + \" - Reusing existing view\");\n            }\n            viewRef = args.view[NG_VIEW];\n            // Getting angular view from original element (in cases when ProxyViewContainer\n            // is used NativeScript internally wraps it in a StackLayout)\n            if (!viewRef && args.view instanceof layout_base_1.LayoutBase && args.view.getChildrenCount() > 0) {\n                viewRef = args.view.getChildAt(0)[NG_VIEW];\n            }\n            if (!viewRef && trace_1.isLogEnabled()) {\n                trace_1.listViewError(\"ViewReference not found for item \" + index + \". View recycling is not working\");\n            }\n            // No ng-template is setup, continue with 'defaultTemplate'\n            if (!viewRef) {\n                return;\n            }\n        }\n        if (!viewRef) {\n            if (trace_1.isLogEnabled()) {\n                trace_1.listViewLog(\"onItemLoading: \" + index + \" - Creating view from template\");\n            }\n            viewRef = this.loader.createEmbeddedView(this.itemTemplate, new ItemContext(), 0);\n            args.view = getItemViewRoot(viewRef);\n            args.view[NG_VIEW] = viewRef;\n        }\n        this.setupViewRef(viewRef, currentItem, index);\n        this.detectChangesOnChild(viewRef, index);\n    };\n    TemplatedItemsComponent.prototype.setupViewRef = function (viewRef, data, index) {\n        var context = viewRef.context;\n        context.$implicit = data;\n        context.item = data;\n        context.index = index;\n        context.even = (index % 2 === 0);\n        context.odd = !context.even;\n        this.setupItemView.next({ view: viewRef, data: data, index: index, context: context });\n    };\n    TemplatedItemsComponent.prototype.getItemTemplateViewFactory = function (template) {\n        var _this = this;\n        return function () {\n            var viewRef = _this.loader.createEmbeddedView(template, new ItemContext(), 0);\n            var resultView = getItemViewRoot(viewRef);\n            resultView[NG_VIEW] = viewRef;\n            return resultView;\n        };\n    };\n    TemplatedItemsComponent.prototype.detectChangesOnChild = function (viewRef, index) {\n        if (trace_1.isLogEnabled()) {\n            trace_1.listViewLog(\"Manually detect changes in child: \" + index);\n        }\n        viewRef.markForCheck();\n        viewRef.detectChanges();\n    };\n    TemplatedItemsComponent.prototype.ngDoCheck = function () {\n        if (this._differ) {\n            if (trace_1.isLogEnabled()) {\n                trace_1.listViewLog(\"ngDoCheck() - execute differ\");\n            }\n            var changes = this._differ.diff(this._items);\n            if (changes) {\n                if (trace_1.isLogEnabled()) {\n                    trace_1.listViewLog(\"ngDoCheck() - refresh\");\n                }\n                this.templatedItemsView.refresh();\n            }\n        }\n    };\n    __decorate([\n        core_1.ViewChild(\"loader\", { read: core_1.ViewContainerRef, static: false }),\n        __metadata(\"design:type\", core_1.ViewContainerRef)\n    ], TemplatedItemsComponent.prototype, \"loader\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", Object)\n    ], TemplatedItemsComponent.prototype, \"setupItemView\", void 0);\n    __decorate([\n        core_1.ContentChild(core_1.TemplateRef, { read: core_1.TemplateRef, static: false }),\n        __metadata(\"design:type\", core_1.TemplateRef)\n    ], TemplatedItemsComponent.prototype, \"itemTemplateQuery\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], TemplatedItemsComponent.prototype, \"items\", null);\n    __decorate([\n        profiling_1.profile,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], TemplatedItemsComponent.prototype, \"onItemLoading\", null);\n    __decorate([\n        profiling_1.profile,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [core_1.EmbeddedViewRef, Number]),\n        __metadata(\"design:returntype\", void 0)\n    ], TemplatedItemsComponent.prototype, \"detectChangesOnChild\", null);\n    return TemplatedItemsComponent;\n}());\nexports.TemplatedItemsComponent = TemplatedItemsComponent;\nfunction getItemViewRoot(viewRef, rootLocator) {\n    if (rootLocator === void 0) { rootLocator = element_registry_1.getSingleViewRecursive; }\n    var rootView = rootLocator(viewRef.rootNodes, 0);\n    return rootView;\n}\nexports.getItemViewRoot = getItemViewRoot;\nexports.TEMPLATED_ITEMS_COMPONENT = new core_1.InjectionToken(\"TemplatedItemsComponent\");\nvar TemplateKeyDirective = /** @class */ (function () {\n    function TemplateKeyDirective(templateRef, comp) {\n        this.templateRef = templateRef;\n        this.comp = comp;\n    }\n    Object.defineProperty(TemplateKeyDirective.prototype, \"nsTemplateKey\", {\n        set: function (value) {\n            if (this.comp && this.templateRef) {\n                this.comp.registerTemplate(value, this.templateRef);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], TemplateKeyDirective.prototype, \"nsTemplateKey\", null);\n    TemplateKeyDirective = __decorate([\n        core_1.Directive({ selector: \"[nsTemplateKey]\" }),\n        __param(1, core_1.Inject(exports.TEMPLATED_ITEMS_COMPONENT)), __param(1, core_1.Host()),\n        __metadata(\"design:paramtypes\", [core_1.TemplateRef,\n            TemplatedItemsComponent])\n    ], TemplateKeyDirective);\n    return TemplateKeyDirective;\n}());\nexports.TemplateKeyDirective = TemplateKeyDirective;\n"]}