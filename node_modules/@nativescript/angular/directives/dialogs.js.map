{"version":3,"file":"dialogs.js","sources":["dialogs.js"],"names":[],"mappingsqCAEO;AACP;;;;;mGAA2B;AAC3B;AACA;AACA;AACA","sourcesContent":["Object.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar ns_location_strategy_1 = require(\"../router/ns-location-strategy\");\nvar app_host_view_1 = require(\"../app-host-view\");\nvar detached_loader_1 = require(\"../common/detached-loader\");\nvar platform_providers_1 = require(\"../platform-providers\");\nvar utils_1 = require(\"../common/utils\");\nvar frame_1 = require(\"@nativescript/core/ui/frame\");\nvar ModalDialogParams = /** @class */ (function () {\n    function ModalDialogParams(context, closeCallback) {\n        if (context === void 0) { context = {}; }\n        this.context = context;\n        this.closeCallback = closeCallback;\n    }\n    return ModalDialogParams;\n}());\nexports.ModalDialogParams = ModalDialogParams;\nvar ModalDialogService = /** @class */ (function () {\n    function ModalDialogService(location) {\n        this.location = location;\n    }\n    ModalDialogService.prototype.showModal = function (type, options) {\n        var _this = this;\n        if (!options.viewContainerRef) {\n            throw new Error(\"No viewContainerRef: \" +\n                \"Make sure you pass viewContainerRef in ModalDialogOptions.\");\n        }\n        var parentView = options.viewContainerRef.element.nativeElement;\n        if (options.target) {\n            parentView = options.target;\n        }\n        if (parentView instanceof app_host_view_1.AppHostView && parentView.ngAppRoot) {\n            parentView = parentView.ngAppRoot;\n        }\n        // _ngDialogRoot is the first child of the previously detached proxy.\n        // It should have 'viewController' (iOS) or '_dialogFragment' (Android) available for\n        // presenting future modal views.\n        if (parentView._ngDialogRoot) {\n            parentView = parentView._ngDialogRoot;\n        }\n        var pageFactory = options.viewContainerRef.injector.get(platform_providers_1.PAGE_FACTORY);\n        // resolve from particular module (moduleRef)\n        // or from same module as parentView (viewContainerRef)\n        var componentContainer = options.moduleRef || options.viewContainerRef;\n        var resolver = componentContainer.injector.get(core_1.ComponentFactoryResolver);\n        var frame = parentView;\n        if (!(parentView instanceof frame_1.Frame)) {\n            frame = (parentView.page && parentView.page.frame) || frame_1.Frame.topmost();\n        }\n        this.location._beginModalNavigation(frame);\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                try {\n                    _this._showDialog(__assign(__assign({}, options), { containerRef: options.viewContainerRef, context: options.context, doneCallback: resolve, pageFactory: pageFactory,\n                        parentView: parentView,\n                        resolver: resolver,\n                        type: type }));\n                }\n                catch (err) {\n                    reject(err);\n                }\n            }, 10);\n        });\n    };\n    ModalDialogService.prototype._showDialog = function (options) {\n        var _this = this;\n        var componentView;\n        var detachedLoaderRef;\n        var closeCallback = utils_1.once(function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            options.doneCallback.apply(undefined, args);\n            if (componentView) {\n                componentView.closeModal();\n                _this.location._closeModalNavigation();\n                detachedLoaderRef.instance.detectChanges();\n                detachedLoaderRef.destroy();\n            }\n        });\n        var modalParams = new ModalDialogParams(options.context, closeCallback);\n        var childInjector = core_1.Injector.create({\n            providers: [{ provide: ModalDialogParams, useValue: modalParams }],\n            parent: options.containerRef.injector\n        });\n        var detachedFactory = options.resolver.resolveComponentFactory(detached_loader_1.DetachedLoader);\n        detachedLoaderRef = options.containerRef.createComponent(detachedFactory, 0, childInjector, null);\n        detachedLoaderRef.instance.loadComponent(options.type).then(function (compRef) {\n            var detachedProxy = compRef.location.nativeElement;\n            if (detachedProxy.getChildrenCount() > 1) {\n                throw new Error(\"Modal content has more than one root view.\");\n            }\n            componentView = detachedProxy.getChildAt(0);\n            if (componentView.parent) {\n                componentView.parent._ngDialogRoot = componentView;\n                componentView.parent.removeChild(componentView);\n            }\n            options.parentView.showModal(componentView, __assign(__assign({}, options), { closeCallback: closeCallback }));\n        });\n    };\n    ModalDialogService = __decorate([\n        core_1.Injectable(),\n        __metadata(\"design:paramtypes\", [ns_location_strategy_1.NSLocationStrategy])\n    ], ModalDialogService);\n    return ModalDialogService;\n}());\nexports.ModalDialogService = ModalDialogService;\n"]}