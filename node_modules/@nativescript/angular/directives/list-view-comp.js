Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var templated_items_comp_1 = require("./templated-items-comp");
var ɵngcc0 = require('@angular/core');
var ListViewComponent = /** @class */ (function (_super) {
    __extends(ListViewComponent, _super);
    function ListViewComponent(_elementRef, _iterableDiffers) {
        return _super.call(this, _elementRef, _iterableDiffers) || this;
    }
    ListViewComponent_1 = ListViewComponent;
    Object.defineProperty(ListViewComponent.prototype, "nativeElement", {
        get: function () {
            return this.templatedItemsView;
        },
        enumerable: true,
        configurable: true
    });
    var ListViewComponent_1;
    ListViewComponent = ListViewComponent_1 = __decorate([ __metadata("design:paramtypes", [core_1.ElementRef,
            core_1.IterableDiffers])
    ], ListViewComponent);
ListViewComponent.ɵfac = function ListViewComponent_Factory(t) { return new (t || ListViewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };
ListViewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ListViewComponent, selectors: [["ListView"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: templated_items_comp_1.TEMPLATED_ITEMS_COMPONENT, useExisting: core_1.forwardRef(function () { return ListViewComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 0, consts: [["loader", ""]], template: function ListViewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "DetachedContainer");
        ɵngcc0.ɵɵelement(1, "Placeholder", null, 0);
        ɵngcc0.ɵɵelementEnd();
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ListViewComponent, [{
        type: core_1.Component,
        args: [{
                selector: "ListView",
                template: "\n        <DetachedContainer>\n            <Placeholder #loader></Placeholder>\n        </DetachedContainer>",
                changeDetection: core_1.ChangeDetectionStrategy.OnPush,
                providers: [{ provide: templated_items_comp_1.TEMPLATED_ITEMS_COMPONENT, useExisting: core_1.forwardRef(function () { return ListViewComponent_1; }) }]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.IterableDiffers }]; }, null); })();
    return ListViewComponent;
}(templated_items_comp_1.TemplatedItemsComponent));
exports.ListViewComponent = ListViewComponent;

//# sourceMappingURL=list-view-comp.js.map