import { AfterViewInit, ElementRef, OnInit, TemplateRef, ViewContainerRef } from "@angular/core";
import { TabView } from "@nativescript/core/ui/tab-view";
import { TextTransform } from "@nativescript/core/ui/text-base";
import * as ɵngcc0 from '@angular/core';
export interface TabViewItemDef {
    title?: string;
    iconSource?: string;
    textTransform?: TextTransform;
}
export declare class TabViewDirective implements AfterViewInit {
    tabView: TabView;
    private _selectedIndex;
    private viewInitialized;
    get selectedIndex(): number;
    set selectedIndex(value: number);
    constructor(element: ElementRef);
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TabViewDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TabViewDirective, "TabView", never, { "selectedIndex": "selectedIndex"; }, {}, never>;
}
export declare class TabViewItemDirective implements OnInit {
    private owner;
    private templateRef;
    private viewContainer;
    private item;
    private _config;
    constructor(owner: TabViewDirective, templateRef: TemplateRef<any>, viewContainer: ViewContainerRef);
    set config(config: TabViewItemDef);
    get config(): TabViewItemDef;
    set title(title: string);
    get title(): string;
    set iconSource(iconSource: string);
    get iconSource(): string;
    set textTransform(textTransform: TextTransform);
    get textTransform(): TextTransform;
    private ensureItem;
    private applyConfig;
    ngOnInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TabViewItemDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TabViewItemDirective, "[tabItem]", never, { "config": "tabItem"; "title": "title"; "iconSource": "iconSource"; "textTransform": "textTransform"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLXZpZXcuZC50cyIsInNvdXJjZXMiOlsidGFiLXZpZXcuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIEVsZW1lbnRSZWYsIE9uSW5pdCwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgVGFiVmlldyB9IGZyb20gXCJAbmF0aXZlc2NyaXB0L2NvcmUvdWkvdGFiLXZpZXdcIjtcbmltcG9ydCB7IFRleHRUcmFuc2Zvcm0gfSBmcm9tIFwiQG5hdGl2ZXNjcmlwdC9jb3JlL3VpL3RleHQtYmFzZVwiO1xuZXhwb3J0IGludGVyZmFjZSBUYWJWaWV3SXRlbURlZiB7XG4gICAgdGl0bGU/OiBzdHJpbmc7XG4gICAgaWNvblNvdXJjZT86IHN0cmluZztcbiAgICB0ZXh0VHJhbnNmb3JtPzogVGV4dFRyYW5zZm9ybTtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRhYlZpZXdEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgICB0YWJWaWV3OiBUYWJWaWV3O1xuICAgIHByaXZhdGUgX3NlbGVjdGVkSW5kZXg7XG4gICAgcHJpdmF0ZSB2aWV3SW5pdGlhbGl6ZWQ7XG4gICAgZ2V0IHNlbGVjdGVkSW5kZXgoKTogbnVtYmVyO1xuICAgIHNldCBzZWxlY3RlZEluZGV4KHZhbHVlOiBudW1iZXIpO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWYpO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVGFiVmlld0l0ZW1EaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIHByaXZhdGUgb3duZXI7XG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjtcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXI7XG4gICAgcHJpdmF0ZSBpdGVtO1xuICAgIHByaXZhdGUgX2NvbmZpZztcbiAgICBjb25zdHJ1Y3Rvcihvd25lcjogVGFiVmlld0RpcmVjdGl2ZSwgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYpO1xuICAgIHNldCBjb25maWcoY29uZmlnOiBUYWJWaWV3SXRlbURlZik7XG4gICAgZ2V0IGNvbmZpZygpOiBUYWJWaWV3SXRlbURlZjtcbiAgICBzZXQgdGl0bGUodGl0bGU6IHN0cmluZyk7XG4gICAgZ2V0IHRpdGxlKCk6IHN0cmluZztcbiAgICBzZXQgaWNvblNvdXJjZShpY29uU291cmNlOiBzdHJpbmcpO1xuICAgIGdldCBpY29uU291cmNlKCk6IHN0cmluZztcbiAgICBzZXQgdGV4dFRyYW5zZm9ybSh0ZXh0VHJhbnNmb3JtOiBUZXh0VHJhbnNmb3JtKTtcbiAgICBnZXQgdGV4dFRyYW5zZm9ybSgpOiBUZXh0VHJhbnNmb3JtO1xuICAgIHByaXZhdGUgZW5zdXJlSXRlbTtcbiAgICBwcml2YXRlIGFwcGx5Q29uZmlnO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG59XG4iXX0=