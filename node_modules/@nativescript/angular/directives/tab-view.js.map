{"version":3,"file":"tab-view.js","sources":["tab-view.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAIO;AACP;;;;;;;;;;oBAAyB;AACzuCAIO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;oBAA6B;AAC7B;AACA;AACA;AACA","sourcesContent":["Object.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar tab_view_1 = require(\"@nativescript/core/ui/tab-view\");\nvar element_registry_1 = require(\"../element-registry\");\nvar trace_1 = require(\"../trace\");\nvar lang_facade_1 = require(\"../lang-facade\");\nvar TabViewDirective = /** @class */ (function () {\n    function TabViewDirective(element) {\n        this.tabView = element.nativeElement;\n    }\n    Object.defineProperty(TabViewDirective.prototype, \"selectedIndex\", {\n        get: function () {\n            return this._selectedIndex;\n        },\n        set: function (value) {\n            this._selectedIndex = value;\n            if (this.viewInitialized) {\n                this.tabView.selectedIndex = this._selectedIndex;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TabViewDirective.prototype.ngAfterViewInit = function () {\n        this.viewInitialized = true;\n        if (trace_1.isLogEnabled()) {\n            trace_1.rendererLog(\"this._selectedIndex: \" + this._selectedIndex);\n        }\n        if (!lang_facade_1.isBlank(this._selectedIndex)) {\n            this.tabView.selectedIndex = this._selectedIndex;\n        }\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number),\n        __metadata(\"design:paramtypes\", [Object])\n    ], TabViewDirective.prototype, \"selectedIndex\", null);\n    TabViewDirective = __decorate([\n        core_1.Directive({\n            selector: \"TabView\",\n        }),\n        __metadata(\"design:paramtypes\", [core_1.ElementRef])\n    ], TabViewDirective);\n    return TabViewDirective;\n}());\nexports.TabViewDirective = TabViewDirective;\nvar TabViewItemDirective = /** @class */ (function () {\n    function TabViewItemDirective(owner, templateRef, viewContainer) {\n        this.owner = owner;\n        this.templateRef = templateRef;\n        this.viewContainer = viewContainer;\n    }\n    Object.defineProperty(TabViewItemDirective.prototype, \"config\", {\n        get: function () {\n            return this._config || {};\n        },\n        set: function (config) {\n            if (!this._config\n                || this._config.iconSource !== config.iconSource\n                || this._config.title !== config.title\n                || this._config.textTransform !== config.textTransform) {\n                this._config = config;\n                this.applyConfig();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TabViewItemDirective.prototype, \"title\", {\n        get: function () {\n            return this.config.title;\n        },\n        set: function (title) {\n            this.config = Object.assign(this.config, { title: title });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TabViewItemDirective.prototype, \"iconSource\", {\n        get: function () {\n            return this.config.iconSource;\n        },\n        set: function (iconSource) {\n            this.config = Object.assign(this.config, { iconSource: iconSource });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TabViewItemDirective.prototype, \"textTransform\", {\n        get: function () {\n            return this.config.textTransform;\n        },\n        set: function (textTransform) {\n            this.config = Object.assign(this.config, { textTransform: textTransform });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TabViewItemDirective.prototype.ensureItem = function () {\n        if (!this.item) {\n            this.item = new tab_view_1.TabViewItem();\n        }\n    };\n    TabViewItemDirective.prototype.applyConfig = function () {\n        this.ensureItem();\n        if (this.config.title) {\n            this.item.title = this.config.title;\n        }\n        if (this.config.iconSource) {\n            this.item.iconSource = this.config.iconSource;\n        }\n        //  TabViewItem textTransform has a default value for Android that kick in\n        // only if no value (even a null value) is set.\n        if (this.config.textTransform) {\n            this.item.textTransform = this.config.textTransform;\n        }\n    };\n    TabViewItemDirective.prototype.ngOnInit = function () {\n        this.applyConfig();\n        var viewRef = this.viewContainer.createEmbeddedView(this.templateRef);\n        // Filter out text nodes and comments\n        var realViews = viewRef.rootNodes.filter(function (node) {\n            return !(node instanceof element_registry_1.InvisibleNode);\n        });\n        if (realViews.length > 0) {\n            this.item.view = realViews[0];\n            var newItems = (this.owner.tabView.items || []).concat([this.item]);\n            this.owner.tabView.items = newItems;\n        }\n    };\n    __decorate([\n        core_1.Input(\"tabItem\"),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], TabViewItemDirective.prototype, \"config\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], TabViewItemDirective.prototype, \"title\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], TabViewItemDirective.prototype, \"iconSource\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], TabViewItemDirective.prototype, \"textTransform\", null);\n    TabViewItemDirective = __decorate([\n        core_1.Directive({\n            selector: \"[tabItem]\" // tslint:disable-line:directive-selector\n        }),\n        __metadata(\"design:paramtypes\", [TabViewDirective,\n            core_1.TemplateRef,\n            core_1.ViewContainerRef])\n    ], TabViewItemDirective);\n    return TabViewItemDirective;\n}());\nexports.TabViewItemDirective = TabViewItemDirective;\n"]}