import { AfterContentInit, DoCheck, ElementRef, EmbeddedViewRef, EventEmitter, InjectionToken, IterableDiffer, IterableDiffers, OnDestroy, TemplateRef, ViewContainerRef } from "@angular/core";
import { ItemEventData, TemplatedItemsView } from "@nativescript/core/ui/list-view";
import { View, KeyedTemplate } from "@nativescript/core/ui/core/view";
import * as ɵngcc0 from '@angular/core';
export declare class ItemContext {
    $implicit?: any;
    item?: any;
    index?: number;
    even?: boolean;
    odd?: boolean;
    constructor($implicit?: any, item?: any, index?: number, even?: boolean, odd?: boolean);
}
export interface SetupItemViewArgs {
    view: EmbeddedViewRef<any>;
    data: any;
    index: number;
    context: ItemContext;
}
export declare abstract class TemplatedItemsComponent implements DoCheck, OnDestroy, AfterContentInit {
    private _iterableDiffers;
    abstract get nativeElement(): TemplatedItemsView;
    protected templatedItemsView: TemplatedItemsView;
    protected _items: any;
    protected _differ: IterableDiffer<KeyedTemplate>;
    protected _templateMap: Map<string, KeyedTemplate>;
    loader: ViewContainerRef;
    setupItemView: EventEmitter<SetupItemViewArgs>;
    itemTemplateQuery: TemplateRef<ItemContext>;
    itemTemplate: TemplateRef<ItemContext>;
    get items(): any;
    set items(value: any);
    constructor(_elementRef: ElementRef, _iterableDiffers: IterableDiffers);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    private setItemTemplates;
    registerTemplate(key: string, template: TemplateRef<ItemContext>): void;
    onItemLoading(args: ItemEventData): void;
    setupViewRef(viewRef: EmbeddedViewRef<ItemContext>, data: any, index: number): void;
    protected getItemTemplateViewFactory(template: TemplateRef<ItemContext>): () => View;
    private detectChangesOnChild;
    ngDoCheck(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TemplatedItemsComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TemplatedItemsComponent, never, never, { "items": "items"; }, { "setupItemView": "setupItemView"; }, ["itemTemplateQuery"]>;
}
export interface ComponentView {
    rootNodes: Array<any>;
    destroy(): void;
}
export declare type RootLocator = (nodes: Array<any>, nestLevel: number) => View;
export declare function getItemViewRoot(viewRef: ComponentView, rootLocator?: RootLocator): View;
export declare const TEMPLATED_ITEMS_COMPONENT: InjectionToken<TemplatedItemsComponent>;
export declare class TemplateKeyDirective {
    private templateRef;
    private comp;
    constructor(templateRef: TemplateRef<any>, comp: TemplatedItemsComponent);
    set nsTemplateKey(value: any);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TemplateKeyDirective, [null, { host: true; }]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TemplateKeyDirective, "[nsTemplateKey]", never, { "nsTemplateKey": "nsTemplateKey"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGVkLWl0ZW1zLWNvbXAuZC50cyIsInNvdXJjZXMiOlsidGVtcGxhdGVkLWl0ZW1zLWNvbXAuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIERvQ2hlY2ssIEVsZW1lbnRSZWYsIEVtYmVkZGVkVmlld1JlZiwgRXZlbnRFbWl0dGVyLCBJbmplY3Rpb25Ub2tlbiwgSXRlcmFibGVEaWZmZXIsIEl0ZXJhYmxlRGlmZmVycywgT25EZXN0cm95LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBJdGVtRXZlbnREYXRhLCBUZW1wbGF0ZWRJdGVtc1ZpZXcgfSBmcm9tIFwiQG5hdGl2ZXNjcmlwdC9jb3JlL3VpL2xpc3Qtdmlld1wiO1xuaW1wb3J0IHsgVmlldywgS2V5ZWRUZW1wbGF0ZSB9IGZyb20gXCJAbmF0aXZlc2NyaXB0L2NvcmUvdWkvY29yZS92aWV3XCI7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJdGVtQ29udGV4dCB7XG4gICAgJGltcGxpY2l0PzogYW55O1xuICAgIGl0ZW0/OiBhbnk7XG4gICAgaW5kZXg/OiBudW1iZXI7XG4gICAgZXZlbj86IGJvb2xlYW47XG4gICAgb2RkPzogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcigkaW1wbGljaXQ/OiBhbnksIGl0ZW0/OiBhbnksIGluZGV4PzogbnVtYmVyLCBldmVuPzogYm9vbGVhbiwgb2RkPzogYm9vbGVhbik7XG59XG5leHBvcnQgaW50ZXJmYWNlIFNldHVwSXRlbVZpZXdBcmdzIHtcbiAgICB2aWV3OiBFbWJlZGRlZFZpZXdSZWY8YW55PjtcbiAgICBkYXRhOiBhbnk7XG4gICAgaW5kZXg6IG51bWJlcjtcbiAgICBjb250ZXh0OiBJdGVtQ29udGV4dDtcbn1cbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIFRlbXBsYXRlZEl0ZW1zQ29tcG9uZW50IGltcGxlbWVudHMgRG9DaGVjaywgT25EZXN0cm95LCBBZnRlckNvbnRlbnRJbml0IHtcbiAgICBwcml2YXRlIF9pdGVyYWJsZURpZmZlcnM7XG4gICAgYWJzdHJhY3QgZ2V0IG5hdGl2ZUVsZW1lbnQoKTogVGVtcGxhdGVkSXRlbXNWaWV3O1xuICAgIHByb3RlY3RlZCB0ZW1wbGF0ZWRJdGVtc1ZpZXc6IFRlbXBsYXRlZEl0ZW1zVmlldztcbiAgICBwcm90ZWN0ZWQgX2l0ZW1zOiBhbnk7XG4gICAgcHJvdGVjdGVkIF9kaWZmZXI6IEl0ZXJhYmxlRGlmZmVyPEtleWVkVGVtcGxhdGU+O1xuICAgIHByb3RlY3RlZCBfdGVtcGxhdGVNYXA6IE1hcDxzdHJpbmcsIEtleWVkVGVtcGxhdGU+O1xuICAgIGxvYWRlcjogVmlld0NvbnRhaW5lclJlZjtcbiAgICBzZXR1cEl0ZW1WaWV3OiBFdmVudEVtaXR0ZXI8U2V0dXBJdGVtVmlld0FyZ3M+O1xuICAgIGl0ZW1UZW1wbGF0ZVF1ZXJ5OiBUZW1wbGF0ZVJlZjxJdGVtQ29udGV4dD47XG4gICAgaXRlbVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxJdGVtQ29udGV4dD47XG4gICAgZ2V0IGl0ZW1zKCk6IGFueTtcbiAgICBzZXQgaXRlbXModmFsdWU6IGFueSk7XG4gICAgY29uc3RydWN0b3IoX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIF9pdGVyYWJsZURpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycyk7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcml2YXRlIHNldEl0ZW1UZW1wbGF0ZXM7XG4gICAgcmVnaXN0ZXJUZW1wbGF0ZShrZXk6IHN0cmluZywgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPEl0ZW1Db250ZXh0Pik6IHZvaWQ7XG4gICAgb25JdGVtTG9hZGluZyhhcmdzOiBJdGVtRXZlbnREYXRhKTogdm9pZDtcbiAgICBzZXR1cFZpZXdSZWYodmlld1JlZjogRW1iZWRkZWRWaWV3UmVmPEl0ZW1Db250ZXh0PiwgZGF0YTogYW55LCBpbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgZ2V0SXRlbVRlbXBsYXRlVmlld0ZhY3RvcnkodGVtcGxhdGU6IFRlbXBsYXRlUmVmPEl0ZW1Db250ZXh0Pik6ICgpID0+IFZpZXc7XG4gICAgcHJpdmF0ZSBkZXRlY3RDaGFuZ2VzT25DaGlsZDtcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcG9uZW50VmlldyB7XG4gICAgcm9vdE5vZGVzOiBBcnJheTxhbnk+O1xuICAgIGRlc3Ryb3koKTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIHR5cGUgUm9vdExvY2F0b3IgPSAobm9kZXM6IEFycmF5PGFueT4sIG5lc3RMZXZlbDogbnVtYmVyKSA9PiBWaWV3O1xuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gZ2V0SXRlbVZpZXdSb290KHZpZXdSZWY6IENvbXBvbmVudFZpZXcsIHJvb3RMb2NhdG9yPzogUm9vdExvY2F0b3IpOiBWaWV3O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgVEVNUExBVEVEX0lURU1TX0NPTVBPTkVOVDogSW5qZWN0aW9uVG9rZW48VGVtcGxhdGVkSXRlbXNDb21wb25lbnQ+O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVGVtcGxhdGVLZXlEaXJlY3RpdmUge1xuICAgIHByaXZhdGUgdGVtcGxhdGVSZWY7XG4gICAgcHJpdmF0ZSBjb21wO1xuICAgIGNvbnN0cnVjdG9yKHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LCBjb21wOiBUZW1wbGF0ZWRJdGVtc0NvbXBvbmVudCk7XG4gICAgc2V0IG5zVGVtcGxhdGVLZXkodmFsdWU6IGFueSk7XG59XG4iXX0=