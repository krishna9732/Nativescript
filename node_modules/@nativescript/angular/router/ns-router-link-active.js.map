{"version":3,"file":"ns-router-link-active.js","sources":["ns-router-link-active.js"],"names":[],"mappingsqCAKO;AACP;;;;;;;;;;;;;;;;;;;;;;oBAA2B;AAC3B;AACA;AACA;AACA","sourcesContent":["Object.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar router_1 = require(\"@angular/router\");\nvar router_url_tree_1 = require(\"./private-imports/router-url-tree\");\nvar ns_router_link_1 = require(\"./ns-router-link\");\n/**\n * The NSRouterLinkActive directive lets you add a CSS class to an element when the link\"s route\n * becomes active.\n *\n * Consider the following example:\n *\n * ```\n * <a [nsRouterLink]=\"/user/bob\" [nsRouterLinkActive]=\"active-link\">Bob</a>\n * ```\n *\n * When the url is either \"/user\" or \"/user/bob\", the active-link class will\n * be added to the component. If the url changes, the class will be removed.\n *\n * You can set more than one class, as follows:\n *\n * ```\n * <a [nsRouterLink]=\"/user/bob\" [nsRouterLinkActive]=\"class1 class2\">Bob</a>\n * <a [nsRouterLink]=\"/user/bob\" [nsRouterLinkActive]=\"[\"class1\", \"class2\"]\">Bob</a>\n * ```\n *\n * You can configure NSRouterLinkActive by passing `exact: true`. This will add the\n * classes only when the url matches the link exactly.\n *\n * ```\n * <a [nsRouterLink]=\"/user/bob\" [nsRouterLinkActive]=\"active-link\"\n * [nsRouterLinkActiveOptions]=\"{exact: true}\">Bob</a>\n * ```\n *\n * Finally, you can apply the NSRouterLinkActive directive to an ancestor of a RouterLink.\n *\n * ```\n * <div [nsRouterLinkActive]=\"active-link\" [nsRouterLinkActiveOptions]=\"{exact: true}\">\n *   <a [nsRouterLink]=\"/user/jim\">Jim</a>\n *   <a [nsRouterLink]=\"/user/bob\">Bob</a>\n * </div>\n * ```\n *\n * This will set the active-link class on the div tag if the url is either \"/user/jim\" or\n * \"/user/bob\".\n *\n * @stable\n */\nvar NSRouterLinkActive = /** @class */ (function () {\n    function NSRouterLinkActive(router, element, renderer) {\n        var _this = this;\n        this.router = router;\n        this.element = element;\n        this.renderer = renderer;\n        this.classes = [];\n        this.active = false;\n        this.nsRouterLinkActiveOptions = { exact: false };\n        this.subscription = router.events.subscribe(function (s) {\n            if (s instanceof router_1.NavigationEnd) {\n                _this.update();\n            }\n        });\n    }\n    Object.defineProperty(NSRouterLinkActive.prototype, \"isActive\", {\n        get: function () {\n            return this.active;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NSRouterLinkActive.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.links.changes.subscribe(function () { return _this.update(); });\n        this.update();\n    };\n    Object.defineProperty(NSRouterLinkActive.prototype, \"nsRouterLinkActive\", {\n        set: function (data) {\n            if (Array.isArray(data)) {\n                this.classes = data;\n            }\n            else {\n                this.classes = data.split(\" \");\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NSRouterLinkActive.prototype.ngOnChanges = function (_) { this.update(); };\n    NSRouterLinkActive.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };\n    NSRouterLinkActive.prototype.update = function () {\n        var _this = this;\n        if (!this.links) {\n            return;\n        }\n        var hasActiveLinks = this.hasActiveLinks();\n        // react only when status has changed to prevent unnecessary dom updates\n        if (this.active !== hasActiveLinks) {\n            var currentUrlTree = this.router.parseUrl(this.router.url);\n            var isActiveLinks_1 = this.reduceList(currentUrlTree, this.links);\n            this.classes.forEach(function (c) { return _this.renderer.setStyle(_this.element.nativeElement, c, isActiveLinks_1); });\n        }\n        Promise.resolve(hasActiveLinks).then(function (active) { return _this.active = active; });\n    };\n    NSRouterLinkActive.prototype.reduceList = function (currentUrlTree, q) {\n        var _this = this;\n        return q.reduce(function (res, link) {\n            return res || router_url_tree_1.containsTree(currentUrlTree, link.urlTree, _this.nsRouterLinkActiveOptions.exact);\n        }, false);\n    };\n    NSRouterLinkActive.prototype.isLinkActive = function (router) {\n        var _this = this;\n        return function (link) {\n            return router.isActive(link.urlTree, _this.nsRouterLinkActiveOptions.exact);\n        };\n    };\n    NSRouterLinkActive.prototype.hasActiveLinks = function () {\n        return this.links.some(this.isLinkActive(this.router));\n    };\n    __decorate([\n        core_1.ContentChildren(ns_router_link_1.NSRouterLink),\n        __metadata(\"design:type\", core_1.QueryList)\n    ], NSRouterLinkActive.prototype, \"links\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], NSRouterLinkActive.prototype, \"nsRouterLinkActiveOptions\", void 0);\n    __decorate([\n        core_1.Input(\"nsRouterLinkActive\"),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], NSRouterLinkActive.prototype, \"nsRouterLinkActive\", null);\n    NSRouterLinkActive = __decorate([\n        core_1.Directive({\n            selector: \"[nsRouterLinkActive]\",\n            exportAs: \"routerLinkActive\",\n        }),\n        __metadata(\"design:paramtypes\", [router_1.Router, core_1.ElementRef, core_1.Renderer2])\n    ], NSRouterLinkActive);\n    return NSRouterLinkActive;\n}());\nexports.NSRouterLinkActive = NSRouterLinkActive;\n"]}