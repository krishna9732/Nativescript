import { AfterContentInit, ElementRef, OnChanges, OnDestroy, QueryList, Renderer2 } from "@angular/core";
import { Router } from "@angular/router";
import { NSRouterLink } from "./ns-router-link";
/**
 * The NSRouterLinkActive directive lets you add a CSS class to an element when the link"s route
 * becomes active.
 *
 * Consider the following example:
 *
 * ```
 * <a [nsRouterLink]="/user/bob" [nsRouterLinkActive]="active-link">Bob</a>
 * ```
 *
 * When the url is either "/user" or "/user/bob", the active-link class will
 * be added to the component. If the url changes, the class will be removed.
 *
 * You can set more than one class, as follows:
 *
 * ```
 * <a [nsRouterLink]="/user/bob" [nsRouterLinkActive]="class1 class2">Bob</a>
 * <a [nsRouterLink]="/user/bob" [nsRouterLinkActive]="["class1", "class2"]">Bob</a>
 * ```
 *
 * You can configure NSRouterLinkActive by passing `exact: true`. This will add the
 * classes only when the url matches the link exactly.
 *
 * ```
 * <a [nsRouterLink]="/user/bob" [nsRouterLinkActive]="active-link"
 * [nsRouterLinkActiveOptions]="{exact: true}">Bob</a>
 * ```
 *
 * Finally, you can apply the NSRouterLinkActive directive to an ancestor of a RouterLink.
 *
 * ```
 * <div [nsRouterLinkActive]="active-link" [nsRouterLinkActiveOptions]="{exact: true}">
 *   <a [nsRouterLink]="/user/jim">Jim</a>
 *   <a [nsRouterLink]="/user/bob">Bob</a>
 * </div>
 * ```
 *
 * This will set the active-link class on the div tag if the url is either "/user/jim" or
 * "/user/bob".
 *
 * @stable
 */
import * as ɵngcc0 from '@angular/core';
export declare class NSRouterLinkActive implements OnChanges, OnDestroy, AfterContentInit {
    private router;
    private element;
    private renderer;
    links: QueryList<NSRouterLink>;
    private classes;
    private subscription;
    private active;
    nsRouterLinkActiveOptions: {
        exact: boolean;
    };
    constructor(router: Router, element: ElementRef, renderer: Renderer2);
    get isActive(): boolean;
    ngAfterContentInit(): void;
    set nsRouterLinkActive(data: string[] | string);
    ngOnChanges(_: {}): any;
    ngOnDestroy(): any;
    private update;
    private reduceList;
    private isLinkActive;
    private hasActiveLinks;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NSRouterLinkActive, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NSRouterLinkActive, "[nsRouterLinkActive]", ["routerLinkActive"], { "nsRouterLinkActiveOptions": "nsRouterLinkActiveOptions"; "nsRouterLinkActive": "nsRouterLinkActive"; }, {}, ["links"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnMtcm91dGVyLWxpbmstYWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbIm5zLXJvdXRlci1saW5rLWFjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgRWxlbWVudFJlZiwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFF1ZXJ5TGlzdCwgUmVuZGVyZXIyIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjtcbmltcG9ydCB7IE5TUm91dGVyTGluayB9IGZyb20gXCIuL25zLXJvdXRlci1saW5rXCI7XG4vKipcbiAqIFRoZSBOU1JvdXRlckxpbmtBY3RpdmUgZGlyZWN0aXZlIGxldHMgeW91IGFkZCBhIENTUyBjbGFzcyB0byBhbiBlbGVtZW50IHdoZW4gdGhlIGxpbmtcInMgcm91dGVcbiAqIGJlY29tZXMgYWN0aXZlLlxuICpcbiAqIENvbnNpZGVyIHRoZSBmb2xsb3dpbmcgZXhhbXBsZTpcbiAqXG4gKiBgYGBcbiAqIDxhIFtuc1JvdXRlckxpbmtdPVwiL3VzZXIvYm9iXCIgW25zUm91dGVyTGlua0FjdGl2ZV09XCJhY3RpdmUtbGlua1wiPkJvYjwvYT5cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhlIHVybCBpcyBlaXRoZXIgXCIvdXNlclwiIG9yIFwiL3VzZXIvYm9iXCIsIHRoZSBhY3RpdmUtbGluayBjbGFzcyB3aWxsXG4gKiBiZSBhZGRlZCB0byB0aGUgY29tcG9uZW50LiBJZiB0aGUgdXJsIGNoYW5nZXMsIHRoZSBjbGFzcyB3aWxsIGJlIHJlbW92ZWQuXG4gKlxuICogWW91IGNhbiBzZXQgbW9yZSB0aGFuIG9uZSBjbGFzcywgYXMgZm9sbG93czpcbiAqXG4gKiBgYGBcbiAqIDxhIFtuc1JvdXRlckxpbmtdPVwiL3VzZXIvYm9iXCIgW25zUm91dGVyTGlua0FjdGl2ZV09XCJjbGFzczEgY2xhc3MyXCI+Qm9iPC9hPlxuICogPGEgW25zUm91dGVyTGlua109XCIvdXNlci9ib2JcIiBbbnNSb3V0ZXJMaW5rQWN0aXZlXT1cIltcImNsYXNzMVwiLCBcImNsYXNzMlwiXVwiPkJvYjwvYT5cbiAqIGBgYFxuICpcbiAqIFlvdSBjYW4gY29uZmlndXJlIE5TUm91dGVyTGlua0FjdGl2ZSBieSBwYXNzaW5nIGBleGFjdDogdHJ1ZWAuIFRoaXMgd2lsbCBhZGQgdGhlXG4gKiBjbGFzc2VzIG9ubHkgd2hlbiB0aGUgdXJsIG1hdGNoZXMgdGhlIGxpbmsgZXhhY3RseS5cbiAqXG4gKiBgYGBcbiAqIDxhIFtuc1JvdXRlckxpbmtdPVwiL3VzZXIvYm9iXCIgW25zUm91dGVyTGlua0FjdGl2ZV09XCJhY3RpdmUtbGlua1wiXG4gKiBbbnNSb3V0ZXJMaW5rQWN0aXZlT3B0aW9uc109XCJ7ZXhhY3Q6IHRydWV9XCI+Qm9iPC9hPlxuICogYGBgXG4gKlxuICogRmluYWxseSwgeW91IGNhbiBhcHBseSB0aGUgTlNSb3V0ZXJMaW5rQWN0aXZlIGRpcmVjdGl2ZSB0byBhbiBhbmNlc3RvciBvZiBhIFJvdXRlckxpbmsuXG4gKlxuICogYGBgXG4gKiA8ZGl2IFtuc1JvdXRlckxpbmtBY3RpdmVdPVwiYWN0aXZlLWxpbmtcIiBbbnNSb3V0ZXJMaW5rQWN0aXZlT3B0aW9uc109XCJ7ZXhhY3Q6IHRydWV9XCI+XG4gKiAgIDxhIFtuc1JvdXRlckxpbmtdPVwiL3VzZXIvamltXCI+SmltPC9hPlxuICogICA8YSBbbnNSb3V0ZXJMaW5rXT1cIi91c2VyL2JvYlwiPkJvYjwvYT5cbiAqIDwvZGl2PlxuICogYGBgXG4gKlxuICogVGhpcyB3aWxsIHNldCB0aGUgYWN0aXZlLWxpbmsgY2xhc3Mgb24gdGhlIGRpdiB0YWcgaWYgdGhlIHVybCBpcyBlaXRoZXIgXCIvdXNlci9qaW1cIiBvclxuICogXCIvdXNlci9ib2JcIi5cbiAqXG4gKiBAc3RhYmxlXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5TUm91dGVyTGlua0FjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95LCBBZnRlckNvbnRlbnRJbml0IHtcbiAgICBwcml2YXRlIHJvdXRlcjtcbiAgICBwcml2YXRlIGVsZW1lbnQ7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBsaW5rczogUXVlcnlMaXN0PE5TUm91dGVyTGluaz47XG4gICAgcHJpdmF0ZSBjbGFzc2VzO1xuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgYWN0aXZlO1xuICAgIG5zUm91dGVyTGlua0FjdGl2ZU9wdGlvbnM6IHtcbiAgICAgICAgZXhhY3Q6IGJvb2xlYW47XG4gICAgfTtcbiAgICBjb25zdHJ1Y3Rvcihyb3V0ZXI6IFJvdXRlciwgZWxlbWVudDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMik7XG4gICAgZ2V0IGlzQWN0aXZlKCk6IGJvb2xlYW47XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgc2V0IG5zUm91dGVyTGlua0FjdGl2ZShkYXRhOiBzdHJpbmdbXSB8IHN0cmluZyk7XG4gICAgbmdPbkNoYW5nZXMoXzoge30pOiBhbnk7XG4gICAgbmdPbkRlc3Ryb3koKTogYW55O1xuICAgIHByaXZhdGUgdXBkYXRlO1xuICAgIHByaXZhdGUgcmVkdWNlTGlzdDtcbiAgICBwcml2YXRlIGlzTGlua0FjdGl2ZTtcbiAgICBwcml2YXRlIGhhc0FjdGl2ZUxpbmtzO1xufVxuIl19