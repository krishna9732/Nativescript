import { RouteReuseStrategy, ActivatedRouteSnapshot, DetachedRouteHandle } from "@angular/router";
import { NSLocationStrategy } from "./ns-location-strategy";
/**
 * Detaches subtrees loaded inside PageRouterOutlet in forward navigation
 * and reattaches them on back.
 * Reuses routes as long as their route config is the same.
 */
import * as ɵngcc0 from '@angular/core';
export declare class NSRouteReuseStrategy implements RouteReuseStrategy {
    private location;
    private cacheByOutlet;
    constructor(location: NSLocationStrategy);
    shouldDetach(route: ActivatedRouteSnapshot): boolean;
    shouldAttach(route: ActivatedRouteSnapshot): boolean;
    store(route: ActivatedRouteSnapshot, state: DetachedRouteHandle): void;
    retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle | null;
    shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean;
    clearCache(outletKey: string): void;
    clearModalCache(outletKey: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NSRouteReuseStrategy, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NSRouteReuseStrategy>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnMtcm91dGUtcmV1c2Utc3RyYXRlZ3kuZC50cyIsInNvdXJjZXMiOlsibnMtcm91dGUtcmV1c2Utc3RyYXRlZ3kuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJvdXRlUmV1c2VTdHJhdGVneSwgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgRGV0YWNoZWRSb3V0ZUhhbmRsZSB9IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjtcbmltcG9ydCB7IE5TTG9jYXRpb25TdHJhdGVneSB9IGZyb20gXCIuL25zLWxvY2F0aW9uLXN0cmF0ZWd5XCI7XG4vKipcbiAqIERldGFjaGVzIHN1YnRyZWVzIGxvYWRlZCBpbnNpZGUgUGFnZVJvdXRlck91dGxldCBpbiBmb3J3YXJkIG5hdmlnYXRpb25cbiAqIGFuZCByZWF0dGFjaGVzIHRoZW0gb24gYmFjay5cbiAqIFJldXNlcyByb3V0ZXMgYXMgbG9uZyBhcyB0aGVpciByb3V0ZSBjb25maWcgaXMgdGhlIHNhbWUuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5TUm91dGVSZXVzZVN0cmF0ZWd5IGltcGxlbWVudHMgUm91dGVSZXVzZVN0cmF0ZWd5IHtcbiAgICBwcml2YXRlIGxvY2F0aW9uO1xuICAgIHByaXZhdGUgY2FjaGVCeU91dGxldDtcbiAgICBjb25zdHJ1Y3Rvcihsb2NhdGlvbjogTlNMb2NhdGlvblN0cmF0ZWd5KTtcbiAgICBzaG91bGREZXRhY2gocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QpOiBib29sZWFuO1xuICAgIHNob3VsZEF0dGFjaChyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCk6IGJvb2xlYW47XG4gICAgc3RvcmUocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIHN0YXRlOiBEZXRhY2hlZFJvdXRlSGFuZGxlKTogdm9pZDtcbiAgICByZXRyaWV2ZShyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCk6IERldGFjaGVkUm91dGVIYW5kbGUgfCBudWxsO1xuICAgIHNob3VsZFJldXNlUm91dGUoZnV0dXJlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBjdXJyOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90KTogYm9vbGVhbjtcbiAgICBjbGVhckNhY2hlKG91dGxldEtleTogc3RyaW5nKTogdm9pZDtcbiAgICBjbGVhck1vZGFsQ2FjaGUob3V0bGV0S2V5OiBzdHJpbmcpOiB2b2lkO1xufVxuIl19