import { ActivatedRoute, Router, UrlTree } from "@angular/router";
import { RouterExtensions } from "./router-extensions";
import { NavigationTransition } from "@nativescript/core/ui/frame";
import * as ɵngcc0 from '@angular/core';
export declare type QueryParamsHandling = "merge" | "preserve" | "";
/**
 * The nsRouterLink directive lets you link to specific parts of your app.
 *
 * Consider the following route configuration:
 * ```
 * [{ path: "/user", component: UserCmp }]
 * ```
 *
 * When linking to this `User` route, you can write:
 *
 * ```
 * <a [nsRouterLink]="["/user"]">link to user component</a>
 * ```
 *
 * NSRouterLink expects the value to be an array of path segments, followed by the params
 * for that level of routing. For instance `["/team", {teamId: 1}, "user", {userId: 2}]`
 * means that we want to generate a link to `/team;teamId=1/user;userId=2`.
 *
 * The first segment name can be prepended with `/`, `./`, or `../`.
 * If the segment begins with `/`, the router will look up the route from the root of the app.
 * If the segment begins with `./`, or doesn"t begin with a slash, the router will
 * instead look in the current component"s children for the route.
 * And if the segment begins with `../`, the router will go up one level.
 */
export declare class NSRouterLink {
    private router;
    private navigator;
    private route;
    target: string;
    queryParams: {
        [k: string]: any;
    };
    fragment: string;
    queryParamsHandling: QueryParamsHandling;
    preserveQueryParams: boolean;
    preserveFragment: boolean;
    skipLocationChange: boolean;
    replaceUrl: boolean;
    clearHistory: boolean;
    pageTransition: boolean | string | NavigationTransition;
    pageTransitionDuration: any;
    private commands;
    constructor(router: Router, navigator: RouterExtensions, route: ActivatedRoute);
    set params(data: any[] | string);
    onTap(): void;
    private getExtras;
    get urlTree(): UrlTree;
    private convertClearHistory;
    private getTransition;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NSRouterLink, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NSRouterLink, "[nsRouterLink]", never, { "pageTransition": "pageTransition"; "params": "nsRouterLink"; "target": "target"; "queryParams": "queryParams"; "fragment": "fragment"; "queryParamsHandling": "queryParamsHandling"; "preserveQueryParams": "preserveQueryParams"; "preserveFragment": "preserveFragment"; "skipLocationChange": "skipLocationChange"; "replaceUrl": "replaceUrl"; "clearHistory": "clearHistory"; "pageTransitionDuration": "pageTransitionDuration"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnMtcm91dGVyLWxpbmsuZC50cyIsInNvdXJjZXMiOlsibnMtcm91dGVyLWxpbmsuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgUm91dGVyLCBVcmxUcmVlIH0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiO1xuaW1wb3J0IHsgUm91dGVyRXh0ZW5zaW9ucyB9IGZyb20gXCIuL3JvdXRlci1leHRlbnNpb25zXCI7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uVHJhbnNpdGlvbiB9IGZyb20gXCJAbmF0aXZlc2NyaXB0L2NvcmUvdWkvZnJhbWVcIjtcbmV4cG9ydCBkZWNsYXJlIHR5cGUgUXVlcnlQYXJhbXNIYW5kbGluZyA9IFwibWVyZ2VcIiB8IFwicHJlc2VydmVcIiB8IFwiXCI7XG4vKipcbiAqIFRoZSBuc1JvdXRlckxpbmsgZGlyZWN0aXZlIGxldHMgeW91IGxpbmsgdG8gc3BlY2lmaWMgcGFydHMgb2YgeW91ciBhcHAuXG4gKlxuICogQ29uc2lkZXIgdGhlIGZvbGxvd2luZyByb3V0ZSBjb25maWd1cmF0aW9uOlxuICogYGBgXG4gKiBbeyBwYXRoOiBcIi91c2VyXCIsIGNvbXBvbmVudDogVXNlckNtcCB9XVxuICogYGBgXG4gKlxuICogV2hlbiBsaW5raW5nIHRvIHRoaXMgYFVzZXJgIHJvdXRlLCB5b3UgY2FuIHdyaXRlOlxuICpcbiAqIGBgYFxuICogPGEgW25zUm91dGVyTGlua109XCJbXCIvdXNlclwiXVwiPmxpbmsgdG8gdXNlciBjb21wb25lbnQ8L2E+XG4gKiBgYGBcbiAqXG4gKiBOU1JvdXRlckxpbmsgZXhwZWN0cyB0aGUgdmFsdWUgdG8gYmUgYW4gYXJyYXkgb2YgcGF0aCBzZWdtZW50cywgZm9sbG93ZWQgYnkgdGhlIHBhcmFtc1xuICogZm9yIHRoYXQgbGV2ZWwgb2Ygcm91dGluZy4gRm9yIGluc3RhbmNlIGBbXCIvdGVhbVwiLCB7dGVhbUlkOiAxfSwgXCJ1c2VyXCIsIHt1c2VySWQ6IDJ9XWBcbiAqIG1lYW5zIHRoYXQgd2Ugd2FudCB0byBnZW5lcmF0ZSBhIGxpbmsgdG8gYC90ZWFtO3RlYW1JZD0xL3VzZXI7dXNlcklkPTJgLlxuICpcbiAqIFRoZSBmaXJzdCBzZWdtZW50IG5hbWUgY2FuIGJlIHByZXBlbmRlZCB3aXRoIGAvYCwgYC4vYCwgb3IgYC4uL2AuXG4gKiBJZiB0aGUgc2VnbWVudCBiZWdpbnMgd2l0aCBgL2AsIHRoZSByb3V0ZXIgd2lsbCBsb29rIHVwIHRoZSByb3V0ZSBmcm9tIHRoZSByb290IG9mIHRoZSBhcHAuXG4gKiBJZiB0aGUgc2VnbWVudCBiZWdpbnMgd2l0aCBgLi9gLCBvciBkb2VzblwidCBiZWdpbiB3aXRoIGEgc2xhc2gsIHRoZSByb3V0ZXIgd2lsbFxuICogaW5zdGVhZCBsb29rIGluIHRoZSBjdXJyZW50IGNvbXBvbmVudFwicyBjaGlsZHJlbiBmb3IgdGhlIHJvdXRlLlxuICogQW5kIGlmIHRoZSBzZWdtZW50IGJlZ2lucyB3aXRoIGAuLi9gLCB0aGUgcm91dGVyIHdpbGwgZ28gdXAgb25lIGxldmVsLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOU1JvdXRlckxpbmsge1xuICAgIHByaXZhdGUgcm91dGVyO1xuICAgIHByaXZhdGUgbmF2aWdhdG9yO1xuICAgIHByaXZhdGUgcm91dGU7XG4gICAgdGFyZ2V0OiBzdHJpbmc7XG4gICAgcXVlcnlQYXJhbXM6IHtcbiAgICAgICAgW2s6IHN0cmluZ106IGFueTtcbiAgICB9O1xuICAgIGZyYWdtZW50OiBzdHJpbmc7XG4gICAgcXVlcnlQYXJhbXNIYW5kbGluZzogUXVlcnlQYXJhbXNIYW5kbGluZztcbiAgICBwcmVzZXJ2ZVF1ZXJ5UGFyYW1zOiBib29sZWFuO1xuICAgIHByZXNlcnZlRnJhZ21lbnQ6IGJvb2xlYW47XG4gICAgc2tpcExvY2F0aW9uQ2hhbmdlOiBib29sZWFuO1xuICAgIHJlcGxhY2VVcmw6IGJvb2xlYW47XG4gICAgY2xlYXJIaXN0b3J5OiBib29sZWFuO1xuICAgIHBhZ2VUcmFuc2l0aW9uOiBib29sZWFuIHwgc3RyaW5nIHwgTmF2aWdhdGlvblRyYW5zaXRpb247XG4gICAgcGFnZVRyYW5zaXRpb25EdXJhdGlvbjogYW55O1xuICAgIHByaXZhdGUgY29tbWFuZHM7XG4gICAgY29uc3RydWN0b3Iocm91dGVyOiBSb3V0ZXIsIG5hdmlnYXRvcjogUm91dGVyRXh0ZW5zaW9ucywgcm91dGU6IEFjdGl2YXRlZFJvdXRlKTtcbiAgICBzZXQgcGFyYW1zKGRhdGE6IGFueVtdIHwgc3RyaW5nKTtcbiAgICBvblRhcCgpOiB2b2lkO1xuICAgIHByaXZhdGUgZ2V0RXh0cmFzO1xuICAgIGdldCB1cmxUcmVlKCk6IFVybFRyZWU7XG4gICAgcHJpdmF0ZSBjb252ZXJ0Q2xlYXJIaXN0b3J5O1xuICAgIHByaXZhdGUgZ2V0VHJhbnNpdGlvbjtcbn1cbiJdfQ==