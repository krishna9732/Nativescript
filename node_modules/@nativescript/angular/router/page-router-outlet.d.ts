import { ChangeDetectorRef, ComponentFactoryResolver, ComponentRef, Injector, OnDestroy, EventEmitter, ViewContainerRef, ElementRef } from "@angular/core";
import { ActivatedRoute, ActivatedRouteSnapshot, ChildrenOutletContexts } from "@angular/router";
import { Device } from "@nativescript/core/platform";
import { BehaviorSubject } from "rxjs";
import { PageFactory } from "../platform-providers";
import { NSLocationStrategy } from "./ns-location-strategy";
import { NSRouteReuseStrategy } from "./ns-route-reuse-strategy";
import * as ɵngcc0 from '@angular/core';
export declare class PageRoute {
    activatedRoute: BehaviorSubject<ActivatedRoute>;
    constructor(startRoute: ActivatedRoute);
}
export declare const pageRouterActivatedSymbol: unique symbol;
export declare const loaderRefSymbol: unique symbol;
export declare function destroyComponentRef(componentRef: ComponentRef<any>): void;
/**
 * There are cases where multiple activatedRoute nodes should be associated/handled by the same PageRouterOutlet.
 * We can gat additional ActivatedRoutes nodes when there is:
 *  - Lazy loading - there is an additional ActivatedRoute node for the RouteConfig with the `loadChildren` setup
 *  - Componentless routes - there is an additional ActivatedRoute node for the componentless RouteConfig
 *
 * Example:
 *   R  <-- root
 *   |
 * feature (lazy module) <-- RouteConfig: { path: "lazy", loadChildren: "./feature/feature.module#FeatureModule" }
 *   |
 * module (componentless route) <-- RouteConfig: { path: "module", children: [...] } // Note: No 'component'
 *   |
 *  home <-- RouteConfig: { path: "module", component: MyComponent } - this is what we get as activatedRoute param
 *
 *  In these cases we will mark the top-most node (feature). NSRouteReuseStrategy will detach the tree there and
 *  use this ActivateRoute as a kay for caching.
 */
export declare function findTopActivatedRouteNodeForOutlet(activatedRoute: ActivatedRouteSnapshot): ActivatedRouteSnapshot;
export declare class PageRouterOutlet implements OnDestroy {
    private parentContexts;
    private location;
    private locationStrategy;
    private componentFactoryResolver;
    private resolver;
    private changeDetector;
    private pageFactory;
    private routeReuseStrategy;
    private activated;
    private _activatedRoute;
    private detachedLoaderFactory;
    private outlet;
    private name;
    private isEmptyOutlet;
    private viewUtil;
    private frame;
    activateEvents: EventEmitter<any>;
    deactivateEvents: EventEmitter<any>;
    /** @deprecated from Angular since v4 */
    get locationInjector(): Injector;
    /** @deprecated from Angular since v4 */
    get locationFactoryResolver(): ComponentFactoryResolver;
    get isActivated(): boolean;
    get component(): Object;
    get activatedRoute(): ActivatedRoute;
    constructor(parentContexts: ChildrenOutletContexts, location: ViewContainerRef, name: string, actionBarVisibility: string, isEmptyOutlet: boolean, locationStrategy: NSLocationStrategy, componentFactoryResolver: ComponentFactoryResolver, resolver: ComponentFactoryResolver, changeDetector: ChangeDetectorRef, device: Device, pageFactory: PageFactory, routeReuseStrategy: NSRouteReuseStrategy, elRef: ElementRef);
    setActionBarVisibility(actionBarVisibility: string): void;
    ngOnDestroy(): void;
    deactivate(): void;
    /**
     * Called when the `RouteReuseStrategy` instructs to detach the subtree
     */
    detach(): ComponentRef<any>;
    /**
     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree
     */
    attach(ref: ComponentRef<any>, activatedRoute: ActivatedRoute): void;
    /**
     * Called by the Router to instantiate a new component during the commit phase of a navigation.
     * This method in turn is responsible for calling the `routerOnActivate` hook of its child.
     */
    activateWith(activatedRoute: ActivatedRoute, resolver: ComponentFactoryResolver | null): void;
    private activateOnGoForward;
    private loadComponentInPage;
    private markActivatedRoute;
    private getComponentFactory;
    private getOutlet;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PageRouterOutlet, [null, null, { attribute: "name"; }, { attribute: "actionBarVisibility"; }, { attribute: "isEmptyOutlet"; }, null, null, null, null, null, null, null, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PageRouterOutlet, "page-router-outlet", never, {}, { "activateEvents": "activate"; "deactivateEvents": "deactivate"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS1yb3V0ZXItb3V0bGV0LmQudHMiLCJzb3VyY2VzIjpbInBhZ2Utcm91dGVyLW91dGxldC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgQ29tcG9uZW50UmVmLCBJbmplY3RvciwgT25EZXN0cm95LCBFdmVudEVtaXR0ZXIsIFZpZXdDb250YWluZXJSZWYsIEVsZW1lbnRSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIENoaWxkcmVuT3V0bGV0Q29udGV4dHMgfSBmcm9tIFwiQGFuZ3VsYXIvcm91dGVyXCI7XG5pbXBvcnQgeyBEZXZpY2UgfSBmcm9tIFwiQG5hdGl2ZXNjcmlwdC9jb3JlL3BsYXRmb3JtXCI7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgUGFnZUZhY3RvcnkgfSBmcm9tIFwiLi4vcGxhdGZvcm0tcHJvdmlkZXJzXCI7XG5pbXBvcnQgeyBOU0xvY2F0aW9uU3RyYXRlZ3kgfSBmcm9tIFwiLi9ucy1sb2NhdGlvbi1zdHJhdGVneVwiO1xuaW1wb3J0IHsgTlNSb3V0ZVJldXNlU3RyYXRlZ3kgfSBmcm9tIFwiLi9ucy1yb3V0ZS1yZXVzZS1zdHJhdGVneVwiO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUGFnZVJvdXRlIHtcbiAgICBhY3RpdmF0ZWRSb3V0ZTogQmVoYXZpb3JTdWJqZWN0PEFjdGl2YXRlZFJvdXRlPjtcbiAgICBjb25zdHJ1Y3RvcihzdGFydFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSk7XG59XG5leHBvcnQgZGVjbGFyZSBjb25zdCBwYWdlUm91dGVyQWN0aXZhdGVkU3ltYm9sOiB1bmlxdWUgc3ltYm9sO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgbG9hZGVyUmVmU3ltYm9sOiB1bmlxdWUgc3ltYm9sO1xuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gZGVzdHJveUNvbXBvbmVudFJlZihjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxhbnk+KTogdm9pZDtcbi8qKlxuICogVGhlcmUgYXJlIGNhc2VzIHdoZXJlIG11bHRpcGxlIGFjdGl2YXRlZFJvdXRlIG5vZGVzIHNob3VsZCBiZSBhc3NvY2lhdGVkL2hhbmRsZWQgYnkgdGhlIHNhbWUgUGFnZVJvdXRlck91dGxldC5cbiAqIFdlIGNhbiBnYXQgYWRkaXRpb25hbCBBY3RpdmF0ZWRSb3V0ZXMgbm9kZXMgd2hlbiB0aGVyZSBpczpcbiAqICAtIExhenkgbG9hZGluZyAtIHRoZXJlIGlzIGFuIGFkZGl0aW9uYWwgQWN0aXZhdGVkUm91dGUgbm9kZSBmb3IgdGhlIFJvdXRlQ29uZmlnIHdpdGggdGhlIGBsb2FkQ2hpbGRyZW5gIHNldHVwXG4gKiAgLSBDb21wb25lbnRsZXNzIHJvdXRlcyAtIHRoZXJlIGlzIGFuIGFkZGl0aW9uYWwgQWN0aXZhdGVkUm91dGUgbm9kZSBmb3IgdGhlIGNvbXBvbmVudGxlc3MgUm91dGVDb25maWdcbiAqXG4gKiBFeGFtcGxlOlxuICogICBSICA8LS0gcm9vdFxuICogICB8XG4gKiBmZWF0dXJlIChsYXp5IG1vZHVsZSkgPC0tIFJvdXRlQ29uZmlnOiB7IHBhdGg6IFwibGF6eVwiLCBsb2FkQ2hpbGRyZW46IFwiLi9mZWF0dXJlL2ZlYXR1cmUubW9kdWxlI0ZlYXR1cmVNb2R1bGVcIiB9XG4gKiAgIHxcbiAqIG1vZHVsZSAoY29tcG9uZW50bGVzcyByb3V0ZSkgPC0tIFJvdXRlQ29uZmlnOiB7IHBhdGg6IFwibW9kdWxlXCIsIGNoaWxkcmVuOiBbLi4uXSB9IC8vIE5vdGU6IE5vICdjb21wb25lbnQnXG4gKiAgIHxcbiAqICBob21lIDwtLSBSb3V0ZUNvbmZpZzogeyBwYXRoOiBcIm1vZHVsZVwiLCBjb21wb25lbnQ6IE15Q29tcG9uZW50IH0gLSB0aGlzIGlzIHdoYXQgd2UgZ2V0IGFzIGFjdGl2YXRlZFJvdXRlIHBhcmFtXG4gKlxuICogIEluIHRoZXNlIGNhc2VzIHdlIHdpbGwgbWFyayB0aGUgdG9wLW1vc3Qgbm9kZSAoZmVhdHVyZSkuIE5TUm91dGVSZXVzZVN0cmF0ZWd5IHdpbGwgZGV0YWNoIHRoZSB0cmVlIHRoZXJlIGFuZFxuICogIHVzZSB0aGlzIEFjdGl2YXRlUm91dGUgYXMgYSBrYXkgZm9yIGNhY2hpbmcuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIGZpbmRUb3BBY3RpdmF0ZWRSb3V0ZU5vZGVGb3JPdXRsZXQoYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QpOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUGFnZVJvdXRlck91dGxldCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBwYXJlbnRDb250ZXh0cztcbiAgICBwcml2YXRlIGxvY2F0aW9uO1xuICAgIHByaXZhdGUgbG9jYXRpb25TdHJhdGVneTtcbiAgICBwcml2YXRlIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcbiAgICBwcml2YXRlIHJlc29sdmVyO1xuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3I7XG4gICAgcHJpdmF0ZSBwYWdlRmFjdG9yeTtcbiAgICBwcml2YXRlIHJvdXRlUmV1c2VTdHJhdGVneTtcbiAgICBwcml2YXRlIGFjdGl2YXRlZDtcbiAgICBwcml2YXRlIF9hY3RpdmF0ZWRSb3V0ZTtcbiAgICBwcml2YXRlIGRldGFjaGVkTG9hZGVyRmFjdG9yeTtcbiAgICBwcml2YXRlIG91dGxldDtcbiAgICBwcml2YXRlIG5hbWU7XG4gICAgcHJpdmF0ZSBpc0VtcHR5T3V0bGV0O1xuICAgIHByaXZhdGUgdmlld1V0aWw7XG4gICAgcHJpdmF0ZSBmcmFtZTtcbiAgICBhY3RpdmF0ZUV2ZW50czogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZGVhY3RpdmF0ZUV2ZW50czogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqIEBkZXByZWNhdGVkIGZyb20gQW5ndWxhciBzaW5jZSB2NCAqL1xuICAgIGdldCBsb2NhdGlvbkluamVjdG9yKCk6IEluamVjdG9yO1xuICAgIC8qKiBAZGVwcmVjYXRlZCBmcm9tIEFuZ3VsYXIgc2luY2UgdjQgKi9cbiAgICBnZXQgbG9jYXRpb25GYWN0b3J5UmVzb2x2ZXIoKTogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyO1xuICAgIGdldCBpc0FjdGl2YXRlZCgpOiBib29sZWFuO1xuICAgIGdldCBjb21wb25lbnQoKTogT2JqZWN0O1xuICAgIGdldCBhY3RpdmF0ZWRSb3V0ZSgpOiBBY3RpdmF0ZWRSb3V0ZTtcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnRDb250ZXh0czogQ2hpbGRyZW5PdXRsZXRDb250ZXh0cywgbG9jYXRpb246IFZpZXdDb250YWluZXJSZWYsIG5hbWU6IHN0cmluZywgYWN0aW9uQmFyVmlzaWJpbGl0eTogc3RyaW5nLCBpc0VtcHR5T3V0bGV0OiBib29sZWFuLCBsb2NhdGlvblN0cmF0ZWd5OiBOU0xvY2F0aW9uU3RyYXRlZ3ksIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIGRldmljZTogRGV2aWNlLCBwYWdlRmFjdG9yeTogUGFnZUZhY3RvcnksIHJvdXRlUmV1c2VTdHJhdGVneTogTlNSb3V0ZVJldXNlU3RyYXRlZ3ksIGVsUmVmOiBFbGVtZW50UmVmKTtcbiAgICBzZXRBY3Rpb25CYXJWaXNpYmlsaXR5KGFjdGlvbkJhclZpc2liaWxpdHk6IHN0cmluZyk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBkZWFjdGl2YXRlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gdGhlIGBSb3V0ZVJldXNlU3RyYXRlZ3lgIGluc3RydWN0cyB0byBkZXRhY2ggdGhlIHN1YnRyZWVcbiAgICAgKi9cbiAgICBkZXRhY2goKTogQ29tcG9uZW50UmVmPGFueT47XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gdGhlIGBSb3V0ZVJldXNlU3RyYXRlZ3lgIGluc3RydWN0cyB0byByZS1hdHRhY2ggYSBwcmV2aW91c2x5IGRldGFjaGVkIHN1YnRyZWVcbiAgICAgKi9cbiAgICBhdHRhY2gocmVmOiBDb21wb25lbnRSZWY8YW55PiwgYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDYWxsZWQgYnkgdGhlIFJvdXRlciB0byBpbnN0YW50aWF0ZSBhIG5ldyBjb21wb25lbnQgZHVyaW5nIHRoZSBjb21taXQgcGhhc2Ugb2YgYSBuYXZpZ2F0aW9uLlxuICAgICAqIFRoaXMgbWV0aG9kIGluIHR1cm4gaXMgcmVzcG9uc2libGUgZm9yIGNhbGxpbmcgdGhlIGByb3V0ZXJPbkFjdGl2YXRlYCBob29rIG9mIGl0cyBjaGlsZC5cbiAgICAgKi9cbiAgICBhY3RpdmF0ZVdpdGgoYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlLCByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIHwgbnVsbCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBhY3RpdmF0ZU9uR29Gb3J3YXJkO1xuICAgIHByaXZhdGUgbG9hZENvbXBvbmVudEluUGFnZTtcbiAgICBwcml2YXRlIG1hcmtBY3RpdmF0ZWRSb3V0ZTtcbiAgICBwcml2YXRlIGdldENvbXBvbmVudEZhY3Rvcnk7XG4gICAgcHJpdmF0ZSBnZXRPdXRsZXQ7XG59XG4iXX0=