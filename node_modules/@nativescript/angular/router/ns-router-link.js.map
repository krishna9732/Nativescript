{"version":3,"file":"ns-router-link.js","sources":["ns-router-link.js"],"names":[],"mappingsoBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["Object.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar router_1 = require(\"@angular/router\");\nvar trace_1 = require(\"../trace\");\nvar router_extensions_1 = require(\"./router-extensions\");\nvar types_1 = require(\"@nativescript/core/utils/types\");\n/**\n * The nsRouterLink directive lets you link to specific parts of your app.\n *\n * Consider the following route configuration:\n * ```\n * [{ path: \"/user\", component: UserCmp }]\n * ```\n *\n * When linking to this `User` route, you can write:\n *\n * ```\n * <a [nsRouterLink]=\"[\"/user\"]\">link to user component</a>\n * ```\n *\n * NSRouterLink expects the value to be an array of path segments, followed by the params\n * for that level of routing. For instance `[\"/team\", {teamId: 1}, \"user\", {userId: 2}]`\n * means that we want to generate a link to `/team;teamId=1/user;userId=2`.\n *\n * The first segment name can be prepended with `/`, `./`, or `../`.\n * If the segment begins with `/`, the router will look up the route from the root of the app.\n * If the segment begins with `./`, or doesn\"t begin with a slash, the router will\n * instead look in the current component\"s children for the route.\n * And if the segment begins with `../`, the router will go up one level.\n */\nvar NSRouterLink = /** @class */ (function () {\n    function NSRouterLink(router, navigator, route) {\n        this.router = router;\n        this.navigator = navigator;\n        this.route = route;\n        this.pageTransition = true;\n        this.commands = [];\n    }\n    Object.defineProperty(NSRouterLink.prototype, \"params\", {\n        set: function (data) {\n            if (Array.isArray(data)) {\n                this.commands = data;\n            }\n            else {\n                this.commands = [data];\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NSRouterLink.prototype.onTap = function () {\n        if (trace_1.isLogEnabled()) {\n            trace_1.routerLog(\"nsRouterLink.tapped: \" + this.commands + \" \" +\n                (\"clear: \" + this.clearHistory + \" \") +\n                (\"transition: \" + JSON.stringify(this.pageTransition) + \" \") +\n                (\"duration: \" + this.pageTransitionDuration));\n        }\n        var extras = this.getExtras();\n        this.navigator.navigateByUrl(this.urlTree, extras);\n    };\n    NSRouterLink.prototype.getExtras = function () {\n        var transition = this.getTransition();\n        return {\n            skipLocationChange: attrBoolValue(this.skipLocationChange),\n            replaceUrl: attrBoolValue(this.replaceUrl),\n            clearHistory: this.convertClearHistory(this.clearHistory),\n            animated: transition.animated,\n            transition: transition.transition,\n        };\n    };\n    Object.defineProperty(NSRouterLink.prototype, \"urlTree\", {\n        get: function () {\n            var urlTree = this.router.createUrlTree(this.commands, {\n                relativeTo: this.route,\n                queryParams: this.queryParams,\n                fragment: this.fragment,\n                preserveQueryParams: attrBoolValue(this.preserveQueryParams),\n                queryParamsHandling: this.queryParamsHandling,\n                preserveFragment: attrBoolValue(this.preserveFragment),\n            });\n            if (trace_1.isLogEnabled()) {\n                trace_1.routerLog(\"nsRouterLink urlTree created: \" + urlTree);\n            }\n            return urlTree;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NSRouterLink.prototype.convertClearHistory = function (value) {\n        return value === true || value === \"true\";\n    };\n    NSRouterLink.prototype.getTransition = function () {\n        var transition;\n        var animated;\n        if (typeof this.pageTransition === \"boolean\") {\n            animated = this.pageTransition;\n        }\n        else if (types_1.isString(this.pageTransition)) {\n            if (this.pageTransition === \"none\" || this.pageTransition === \"false\") {\n                animated = false;\n            }\n            else {\n                animated = true;\n                transition = {\n                    name: this.pageTransition\n                };\n            }\n        }\n        else {\n            animated = true;\n            transition = this.pageTransition;\n        }\n        var duration = +this.pageTransitionDuration;\n        if (!isNaN(duration)) {\n            transition = transition || {};\n            transition.duration = duration;\n        }\n        return { animated: animated, transition: transition };\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], NSRouterLink.prototype, \"target\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], NSRouterLink.prototype, \"queryParams\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], NSRouterLink.prototype, \"fragment\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], NSRouterLink.prototype, \"queryParamsHandling\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], NSRouterLink.prototype, \"preserveQueryParams\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], NSRouterLink.prototype, \"preserveFragment\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], NSRouterLink.prototype, \"skipLocationChange\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], NSRouterLink.prototype, \"replaceUrl\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], NSRouterLink.prototype, \"clearHistory\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], NSRouterLink.prototype, \"pageTransition\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], NSRouterLink.prototype, \"pageTransitionDuration\", void 0);\n    __decorate([\n        core_1.Input(\"nsRouterLink\"),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], NSRouterLink.prototype, \"params\", null);\n    __decorate([\n        core_1.HostListener(\"tap\"),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], NSRouterLink.prototype, \"onTap\", null);\n    NSRouterLink = __decorate([\n        core_1.Directive({ selector: \"[nsRouterLink]\" }),\n        __metadata(\"design:paramtypes\", [router_1.Router,\n            router_extensions_1.RouterExtensions,\n            router_1.ActivatedRoute])\n    ], NSRouterLink);\n    return NSRouterLink;\n}());\nexports.NSRouterLink = NSRouterLink;\nfunction attrBoolValue(s) {\n    return s === \"\" || !!s;\n}\n"]}