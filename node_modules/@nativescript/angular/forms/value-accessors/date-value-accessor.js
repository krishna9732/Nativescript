Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var base_value_accessor_1 = require("./base-value-accessor");
var ɵngcc0 = require('@angular/core');
var DATE_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return DateValueAccessor; }),
    multi: true,
};
/**
 * The accessor for setting a date and listening to changes that is used by the
 * {@link NgModel} directives.
 *
 *  ### Example
 *  ```
 *  <DatePicker [(ngModel)]="model.test">
 *  ```
 */
var DateValueAccessor = /** @class */ (function (_super) {
    __extends(DateValueAccessor, _super);
    function DateValueAccessor(elementRef) {
        return _super.call(this, elementRef.nativeElement) || this;
    }
    DateValueAccessor.prototype.writeValue = function (value) {
        var normalized = _super.prototype.normalizeValue.call(this, value);
        this.view.date = normalized;
    };
    DateValueAccessor = __decorate([ __metadata("design:paramtypes", [core_1.ElementRef])
    ], DateValueAccessor);
DateValueAccessor.ɵfac = function DateValueAccessor_Factory(t) { return new (t || DateValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
DateValueAccessor.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DateValueAccessor, selectors: [["DatePicker", "ngModel", ""], ["DatePicker", "formControlName", ""], ["DatePicker", "formControl", ""], ["datepicker", "ngModel", ""], ["datepicker", "formControlName", ""], ["datepicker", "formControl", ""], ["datePicker", "ngModel", ""], ["datePicker", "formControlName", ""], ["datePicker", "formControl", ""], ["date-picker", "ngModel", ""], ["date-picker", "formControlName", ""], ["date-picker", "formControl", ""]], hostBindings: function DateValueAccessor_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("dateChange", function DateValueAccessor_dateChange_HostBindingHandler($event) { return ctx.onChange($event.value); });
    } }, features: [ɵngcc0.ɵɵProvidersFeature([DATE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DateValueAccessor, [{
        type: core_1.Directive,
        args: [{
                selector: "DatePicker[ngModel],DatePicker[formControlName],DatePicker[formControl]," +
                    "datepicker[ngModel],datepicker[formControlName],datepicker[formControl]," +
                    "datePicker[ngModel],datePicker[formControlName],datePicker[formControl]," +
                    "date-picker[ngModel],date-picker[formControlName],date-picker[formControl]",
                providers: [DATE_VALUE_ACCESSOR],
                host: {
                    "(dateChange)": "onChange($event.value)"
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();
    return DateValueAccessor;
}(base_value_accessor_1.BaseValueAccessor));
exports.DateValueAccessor = DateValueAccessor;

//# sourceMappingURL=date-value-accessor.js.map