{"version":3,"file":"number-value-accessor.js","sources":["number-value-accessor.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCASO;AACP;;;;;;;;;;;;;;;2EAA4B;AAC5B;AACA;AACA;AACA","sourcesContent":["Object.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar forms_1 = require(\"@angular/forms\");\nvar base_value_accessor_1 = require(\"./base-value-accessor\");\nvar NUMBER_VALUE_ACCESSOR = {\n    provide: forms_1.NG_VALUE_ACCESSOR,\n    useExisting: core_1.forwardRef(function () { return NumberValueAccessor; }),\n    multi: true,\n};\n/**\n * The accessor for setting a value and listening to changes that is used by the\n * {@link NgModel}\n *\n *  ### Example\n *  ```\n *  <Slider [(ngModel)]=\"model.test\">\n *  ```\n */\nvar NumberValueAccessor = /** @class */ (function (_super) {\n    __extends(NumberValueAccessor, _super);\n    function NumberValueAccessor(elementRef) {\n        return _super.call(this, elementRef.nativeElement) || this;\n    }\n    NumberValueAccessor.prototype.writeValue = function (value) {\n        var normalized = _super.prototype.normalizeValue.call(this, value);\n        this.view.value = normalized;\n    };\n    NumberValueAccessor = __decorate([\n        core_1.Directive({\n            selector: \"Slider[ngModel],Slider[formControlName],Slider[formControl],\" +\n                \"slider[ngModel],slider[formControlName],slider[formControl]\",\n            providers: [NUMBER_VALUE_ACCESSOR],\n            host: {\n                \"(valueChange)\": \"onChange($event.value)\",\n            },\n        }),\n        __metadata(\"design:paramtypes\", [core_1.ElementRef])\n    ], NumberValueAccessor);\n    return NumberValueAccessor;\n}(base_value_accessor_1.BaseValueAccessor));\nexports.NumberValueAccessor = NumberValueAccessor;\n"]}