Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var base_value_accessor_1 = require("./base-value-accessor");
var ɵngcc0 = require('@angular/core');
var TIME_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return TimeValueAccessor; }),
    multi: true,
};
/**
 * The accessor for setting a time and listening to changes that is used by the
 * {@link NgModel} directives.
 *
 *  ### Example
 *  ```
 *  <TimePicker [(ngModel)]="model.test">
 *  ```
 */
var TimeValueAccessor = /** @class */ (function (_super) {
    __extends(TimeValueAccessor, _super);
    function TimeValueAccessor(elementRef) {
        return _super.call(this, elementRef.nativeElement) || this;
    }
    TimeValueAccessor.prototype.writeValue = function (value) {
        var normalized = _super.prototype.normalizeValue.call(this, value);
        this.view.time = normalized;
    };
    TimeValueAccessor = __decorate([ __metadata("design:paramtypes", [core_1.ElementRef])
    ], TimeValueAccessor);
TimeValueAccessor.ɵfac = function TimeValueAccessor_Factory(t) { return new (t || TimeValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
TimeValueAccessor.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TimeValueAccessor, selectors: [["TimePicker", "ngModel", ""], ["TimePicker", "formControlName", ""], ["TimePicker", "formControl", ""], ["timepicker", "ngModel", ""], ["timepicker", "formControlName", ""], ["timepicker", "formControl", ""], ["timePicker", "ngModel", ""], ["timePicker", "formControlName", ""], ["timePicker", "formControl", ""], ["time-picker", "ngModel", ""], ["time-picker", "formControlName", ""], ["time-picker", "formControl", ""]], hostBindings: function TimeValueAccessor_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("timeChange", function TimeValueAccessor_timeChange_HostBindingHandler($event) { return ctx.onChange($event.value); });
    } }, features: [ɵngcc0.ɵɵProvidersFeature([TIME_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TimeValueAccessor, [{
        type: core_1.Directive,
        args: [{
                selector: "TimePicker[ngModel],TimePicker[formControlName],TimePicker[formControl]," +
                    "timepicker[ngModel],timepicker[formControlName],timepicker[formControl]," +
                    "timePicker[ngModel],timePicker[formControlName],timePicker[formControl]," +
                    "time-picker[ngModel],time-picker[formControlName],time-picker[formControl]",
                providers: [TIME_VALUE_ACCESSOR],
                host: {
                    "(timeChange)": "onChange($event.value)"
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();
    return TimeValueAccessor;
}(base_value_accessor_1.BaseValueAccessor));
exports.TimeValueAccessor = TimeValueAccessor;

//# sourceMappingURL=time-value-accessor.js.map